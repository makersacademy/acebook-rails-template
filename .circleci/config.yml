version: 2.0 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    parallelism: 1 # run three instances of this job in parallel
    docker: # run the steps with Docker
      - image: circleci/ruby:3.0.0-node # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: circleci/postgres:11-alpine # database image
        environment: # environment variables for database, it is kind of obvious but it is important that they match with your test config in database.yml
          POSTGRES_USER: postgres
            # pgapp
          POSTGRES_DB: pgapp_production
          POSTGRES_PASSWORD: <%= ENV['PGAPP_DATABASE_PASSWORD'] %>
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
      # Which version of bundler?
      - run:
          name: Which bundler?
          command: gem install bundler
      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - Team-myAce-acebook-rails-template-bundle-v2-{{ checksum "Gemfile.lock" }}
            - Team-myAce-acebook-rails-template-bundle-v2-
      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check --path vendor/bundle || bundle install --deployment
      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: Team-myAce-acebook-rails-template-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:create db:schema:load --trace
      - run:
          name: Run rspec in parallel
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs